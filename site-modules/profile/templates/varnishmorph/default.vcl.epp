<%- | 
  String[1] $backend1,
  String[1] $backend2,
  String[1] $ttl,
| -%>
vcl 4.0;
import directors;

backend server1 {
  .host = "<%= $backend1 %>";
  .port = "5000";
  .connect_timeout = 30s;
  .first_byte_timeout = 30s;
  .between_bytes_timeout = 30s;
  .probe = {
    .url = "/engine";
    .timeout = 5s;
    .interval = 30s;
    .window = 5;
    .threshold = 3;
  }
}

backend server2 {
  .host = "<%= $backend2 %>";
  .port = "5000";
  .connect_timeout = 30s;
  .first_byte_timeout = 30s;
  .between_bytes_timeout = 30s;
  .probe = {
    .url = "/engine";
    .timeout = 5s;
    .interval = 30s;
    .window = 5;
    .threshold = 3;
  }
}

sub vcl_hash {
  hash_data(req.http.accept);
}

sub vcl_init {
  new bar = directors.round_robin();
  bar.add_backend(server1);
  bar.add_backend(server2);
}

sub vcl_recv {
  # send all traffic to the bar director:
  set req.backend_hint = bar.backend();
  unset req.http.Cookie;
  return(hash);
}

sub vcl_deliver {
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
}

sub vcl_backend_response {
  # eXist jetty always sets the sessionid cookie
  # we just ignore all cookies from the server
  unset beresp.http.set-cookie;

  # Add a grace in case the backend is down
  set beresp.grace = 1h;

  if (beresp.ttl <= 0s && beresp.status != 201) {
    # Varnish determined the object was not cacheable
    set beresp.http.X-Cacheable = "NO:Not Cacheable";
    set beresp.http.X-Cache-TTL = beresp.ttl;
  } else {
      # Varnish determined the object was cacheable
      # override the server ttl 
      set beresp.ttl = <%= $ttl %>s;
      set beresp.http.X-Cacheable = "YES";
      set beresp.http.X-Cache-TTL = beresp.ttl;
      set beresp.http.Access-Control-Allow-Origin = "*";
      set beresp.http.Access-Control-Allow-Methods = "GET, OPTIONS";
      set beresp.http.Access-Control-Allow-Headers = "Origin, Accept, Content-Type, X-Requested-With";
  }
}

