# -*- coding: utf-8 -*-

import os
from capitains_nautilus.flask_ext import FlaskNautilus
from capitains_nautilus.cts.resolver import NautilusCtsResolver
from MyCapytain.resolvers.utils import CollectionDispatcher
from MyCapytain.resources.prototypes.cts.inventory import CtsTextInventoryCollection as TextInventoryCollection, CtsTextInventoryMetadata as PrototypeTextInventory


from flask import Flask
d = "<%= @data_root %>"
tic = TextInventoryCollection()
latin = PrototypeTextInventory("urn:alpheios:latinLit", parent=tic)
latin.set_label("Classical Latin", "eng")
gc = PrototypeTextInventory("urn:alpheios:greekLit", parent=tic)
gc.set_label("Ancient Greek", "eng")

dispatcher = CollectionDispatcher(tic)


@dispatcher.inventory("urn:alpheios:latinLit")
def dispatchLatinLit(collection, path=None, **kwargs):
    if collection.id.startswith("urn:cts:latinLit:"):
        return True
    return False

@dispatcher.inventory("urn:alpheios:greekLit")
def dispatchGreekLit(collection, path=None, **kwargs):
    if collection.id.startswith("urn:cts:greekLit:"):
        return True
    return False

resolver = NautilusCtsResolver(
    [os.path.join(d,o) for o in os.listdir(d) if os.path.isdir(os.path.join(d,o))],
    dispatcher=dispatcher
)



resolver.parse()

app = Flask("Nautilus")
nautilus = FlaskNautilus(
    prefix="/api",
    app=app,
    resolver=resolver
)

app.debug = True
if __name__ == "__main__":
    app.run("0.0.0.0")

